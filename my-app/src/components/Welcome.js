import React, { useState, useEffect } from "react";
import Footer from "../components/Footer";
import { FaEnvelope, FaSearch } from "react-icons/fa";
import StudentDashboard from "../components/StudentDashboard";
import "./LandingPage.css";

const Welcome = () => {
  const [userName, setUserName] = useState("");
  const [showDashboard, setShowDashboard] = useState(false);
  const [initialMessagingInstituteId, setInitialMessagingInstituteId] = useState("");
  const [initialMessagingInstituteName, setInitialMessagingInstituteName] = useState("");

  useEffect(() => {
    const fetchUserName = async () => {
      try {
        const token = localStorage.getItem("userToken"); // Assuming general user info uses localStorage
        if (!token) {
          alert("Session expired. Please log in again.");
          window.location.href = "/login";
          return;
        }
        const response = await fetch("https://major-project01-1ukh.onrender.com/api/student/getUserName", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
          cache: "no-store",
        });
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        setUserName(data.name || "Student");
      } catch (error) {
        console.error("Error fetching user name:", error.message);
      }
    };
    fetchUserName();
  }, []);

  const handleOpenChat = () => {
    setShowDashboard(true);
  };

  const handleCloseDashboard = () => {
    setShowDashboard(false);
    setInitialMessagingInstituteId("");
    setInitialMessagingInstituteName("");
  };

  return (
    <div
      className="landing-container"
      style={{
        background: 'linear-gradient(135deg, #a1c4fd 0%, #c2e9fb 100%)',
        backgroundSize: "cover",
        backgroundPosition: "center",
        minHeight: "100vh",
        display: "flex",
        flexDirection: "column",
        alignItems: "center",
        justifyContent: "space-between",
        textAlign: "center",
        color: '#333',
        padding: '20px',
        boxSizing: 'border-box',
      }}
    >
      <div className="content">
        <h2 style={{ fontFamily: 'Montserrat, sans-serif', fontSize: '2.5em', fontWeight: 600, marginBottom: '15px', color: '#1e3a8a', display: 'flex', alignItems: 'center', gap: '15px', justifyContent: 'center' }}>
          Welcome, <span className="username">{userName || "Guest"}</span>
          <button
            className="msg-inline-btn"
            onClick={handleOpenChat}
            title="Open Messages"
          >
            <FaEnvelope />
          </button>
        </h2>
        <p style={{ fontFamily: 'Open Sans, sans-serif', fontSize: '1.1em', lineHeight: '1.6', color: '#555', marginBottom: '20px' }}>
          <FaSearch style={{ marginRight: '8px' }} /> Use the search bar above to find your college easily.
        </p>

        {showDashboard && (
          <div className="dashboard-overlay">
            <StudentDashboard
              initialMessagingInstituteId={initialMessagingInstituteId}
              initialMessagingInstituteName={initialMessagingInstituteName}
              onClose={handleCloseDashboard}
            />
          </div>
        )}
      </div>
      <Footer />
    </div>
  );
};

export default Welcome;
// Welcome.js
// import React, { useState, useEffect } from "react";
// import Footer from "../components/Footer";
// import { FaEnvelope, FaSearch } from "react-icons/fa";
// import ChatBox from "./StudentChatBox";
// import axiosInstance from "../axios";
// import { jwtDecode } from "jwt-decode";
// import "./LandingPage.css";

// const Welcome = () => {
// Â  const [userName, setUserName] = useState("");
// Â  const [showChat, setShowChat] = useState(false);
// Â  const [hasNewMessage, setHasNewMessage] = useState(false);
// Â  const [instituteList, setInstituteList] = useState([]);
// Â  const [selectedInstitute, setSelectedInstitute] = useState(null);
// Â  const [studentId, setStudentId] = useState(""); // Add state for studentId

// Â  useEffect(() => {
// Â  Â  const fetchUserName = async () => {
// Â  Â  Â  try {
// Â  Â  Â  Â  const token = localStorage.getItem("userToken");

// Â  Â  Â  Â  if (!token) {
// Â  Â  Â  Â  Â  alert("Session expired. Please log in again.");
// Â  Â  Â  Â  Â  window.location.href = "/login";
// Â  Â  Â  Â  Â  return;
// Â  Â  Â  Â  }

// Â  Â  Â  Â  const response = await fetch("https://major-project01-1ukh.onrender.com/api/student/getUserName", {
// Â  Â  Â  Â  Â  headers: {
// Â  Â  Â  Â  Â  Â  Authorization: `Bearer ${token}`,
// Â  Â  Â  Â  Â  },
// Â  Â  Â  Â  Â  cache: "no-store",
// Â  Â  Â  Â  });

// Â  Â  Â  Â  if (!response.ok) {
// Â  Â  Â  Â  Â  throw new Error(`HTTP error! status: ${response.status}`);
// Â  Â  Â  Â  }

// Â  Â  Â  Â  const data = await response.json();
// Â  Â  Â  Â  setUserName(data.name || "Student");
// Â  Â  Â  } catch (error) {
// Â  Â  Â  Â  console.error("Error fetching user name:", error.message);
// Â  Â  Â  }
// Â  Â  };

// Â  Â  fetchUserName();
// Â  }, []);

// Â  useEffect(() => {
// Â  Â  const fetchContacts = async () => {
// Â  Â  Â  try {
// Â  Â  Â  Â  const token = sessionStorage.getItem("studentToken");
// Â  Â  Â  Â  if (!token) return;
// Â  Â  Â  Â  const decoded = jwtDecode(token);
// Â  Â  Â  Â  const studentId = decoded.id;
// Â  Â  Â  Â  setStudentId(studentId); // Store studentId
// Â  Â  Â  Â  const res = await axiosInstance.get(`/messages/contacts/${studentId}`);
// Â  Â  Â  Â  if (res.data.success) {
// Â  Â  Â  Â  Â  setInstituteList(res.data.contacts);
// Â  Â  Â  Â  }
// Â  Â  Â  } catch (err) {
// Â  Â  Â  Â  console.error("Error fetching contacts:", err.message);
// Â  Â  Â  }
// Â  };

// Â  Â  fetchContacts();
// Â  }, []);

// Â  // ðŸ”” Poll for new messages notification
// Â  useEffect(() => {
// Â  Â  const token = sessionStorage.getItem("studentToken");
// Â  Â  if (!token) return;

// Â  Â  const decoded = jwtDecode(token);
// Â  Â  const studentId = decoded.id;
// Â  Â  setStudentId(studentId); // Also set it here, in case this effect runs first.

// Â  Â  const checkNewMessages = async () => {
// Â  Â  Â  try {
// Â  Â  Â  Â  const res = await axiosInstance.get(`/messages/unread/${studentId}`);
// Â  Â  Â  Â  const data = res.data;

// Â  Â  Â  Â  if (data.success) {
// Â  Â  Â  Â  Â  setHasNewMessage(data.newMessagesExist); // boolean returned from backend
// Â  Â  Â  Â  }
// Â  Â  Â  } catch (err) {
// Â  Â  Â  Â  console.error("Message check error:", err.message);
// Â  Â  Â  }
// Â  Â  };

// Â  Â  checkNewMessages();
// Â  Â  const interval = setInterval(checkNewMessages, 3000);

// Â  Â  return () => clearInterval(interval);
// Â  }, []);

// Â  const handleOpenChat = () => {
// Â  Â  setShowChat(!showChat);
// Â  Â  setHasNewMessage(false); // clear dot when opening chat
// Â  };

// Â  return (
// Â  Â  <div
// Â  Â  Â  className="landing-container"
// Â  Â  Â  style={{
// Â  Â  Â  Â  background: 'linear-gradient(135deg, #a1c4fd 0%, #c2e9fb 100%)',
// Â  Â  Â  Â  backgroundSize: "cover",
// Â  Â  Â  Â  backgroundPosition: "center",
// Â  Â  Â  Â  minHeight: "100vh",
// Â  Â  Â  Â  display: "flex",
// Â  Â  Â  Â  flexDirection: "column",
// Â  Â  Â  Â  alignItems: "center",
// Â  Â  Â  Â  justifyContent: "space-between",
// Â  Â  Â  Â  textAlign: "center",
// Â  Â  Â  Â  color: '#333',
// Â  Â  Â  Â  padding: '20px',
// Â  Â  Â  Â  boxSizing: 'border-box',
// Â  Â  Â  }}
// Â  Â  >
// Â  Â  Â  <div className="content">
// Â  Â  Â  Â  <h2
// Â  Â  Â  Â  Â  style={{
// Â  Â  Â  Â  Â  Â  fontFamily: 'Montserrat, sans-serif',
// Â  Â  Â  Â  Â  Â  fontSize: '2.5em',
// Â  Â  Â  Â  Â  Â  fontWeight: 600,
// Â  Â  Â  Â  Â  Â  marginBottom: '15px',
// Â  Â  Â  Â  Â  Â  color: '#1e3a8a',
// Â  Â  Â  Â  Â  Â  display: 'flex',
// Â  Â  Â  Â  Â  Â  alignItems: 'center',
// Â  Â  Â  Â  Â  Â  gap: '15px',
// Â  Â  Â  Â  Â  Â  justifyContent: 'center',
// Â  Â  Â  Â  Â  }}
// Â  Â  Â  Â  >
// Â  Â  Â  Â  Â  Welcome, <span className="username">{userName || "Guest"}</span>
// Â  Â  Â  Â  Â  <button
// Â  Â  Â  Â  Â  Â  className="msg-inline-btn"
// Â  Â  Â  Â  Â  Â  onClick={handleOpenChat}
// Â  Â  Â  Â  Â  Â  title="Check Messages"
// Â  Â  Â  Â  Â  Â  style={{ position: "relative" }}
// Â  Â  Â  Â  Â  >
// Â  Â  Â  Â  Â  Â  <FaEnvelope />
// Â  Â  Â  Â  Â  Â  {hasNewMessage && <span className="blue-dot" />}
// Â  Â  Â  Â  Â  </button>
// Â  Â  Â  Â  </h2>
// Â  Â  Â  Â  <p
// Â  Â  Â  Â  Â  style={{
// Â  Â  Â  Â  Â  Â  fontFamily: 'Open Sans, sans-serif',
// Â  Â  Â  Â  Â  Â  fontSize: '1.1em',
// Â  Â  Â  Â  Â  Â  lineHeight: '1.6',
// Â  Â  Â  Â  Â  Â  color: '#555',
// Â  Â  Â  Â  Â  Â  marginBottom: '20px',
// Â  Â  Â  Â  Â  }}
// Â  Â  Â  Â  >
// Â  Â  Â  Â  Â  <FaSearch style={{ marginRight: '8px' }} /> Use the search bar above to
// Â  Â  Â  Â  Â  find your college easily.
// Â  Â  Â  Â  </p>

// Â  Â  Â  Â  {instituteList.length > 0 && (
// Â  Â  Â  Â  Â  <div style={{ marginBottom: "15px" }}>
// Â  Â  Â  Â  Â  Â  <label style={{ marginRight: "10px", fontWeight: 500 }}>
// Â  Â  Â  Â  Â  Â  Â  Select Institute to Chat:
// Â  Â  Â  Â  Â  Â  </label>
// Â  Â  Â  Â  Â  Â  <select
// Â  Â  Â  Â  Â  Â  Â  value={selectedInstitute?._id || ""}
// Â  Â  Â  Â  Â  Â  Â  onChange={(e) => {
// Â  Â  Â  Â  Â  Â  Â  Â  const selected = instituteList.find((i) => i._id === e.target.value);
// Â  Â  Â  Â  Â  Â  Â  Â  setSelectedInstitute(selected);
// Â  Â  Â  Â  Â  Â  Â  Â  setShowChat(true);
// Â  Â  Â  Â  Â  Â  Â  Â  setHasNewMessage(false);
// Â  Â  Â  Â  Â  Â  Â  }}
// Â  Â  Â  Â  Â  Â  >
// Â  Â  Â  Â  Â  Â  Â  <option value="">-- Choose --</option>
// Â  Â  Â  Â  Â  Â  Â  {instituteList.map((institute) => (
// Â  Â  Â  Â  Â  Â  Â  Â  <option key={institute._id} value={institute._id}>
// Â  Â  Â  Â  Â  Â  Â  Â  Â  {institute.name}
// Â  Â  Â  Â  Â  Â  Â  Â  </option>
// Â  Â  Â  Â  Â  Â  Â  ))}
// Â  Â  Â  Â  Â  Â  </select>
// Â  Â  Â  Â  Â  </div>
// Â  Â  Â  Â  )}

// Â  Â  Â  Â  {/* âœ… Chat Modal with receiver info */}
// Â  Â  Â  Â  {showChat && selectedInstitute && (
// Â  Â  Â  Â  Â  <div className="chat-popup">
// Â  Â  Â  Â  Â  Â  <ChatBox
// Â  Â  Â  Â  Â  Â  Â  receiverId={selectedInstitute._id}
// Â  Â  Â  Â  Â  Â  Â  receiverName={selectedInstitute.name}
// Â  Â  Â  Â  Â  Â  Â  eventId={null}
// Â  Â  Â  Â  Â  Â  Â  onClose={() => setShowChat(false)}
// Â  Â  Â  Â  Â  Â  />
// Â  Â  Â  Â  Â  </div>
// Â  Â  Â  Â  )}
// Â  Â  Â  </div>

// Â  Â  Â  <Footer />
// Â  Â  </div>
// Â  );
// };

// export default Welcome;
